AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lunora Player - MediaConnect RTMP Router for Granular Destination Control'

Parameters:
  ProjectName:
    Type: String
    Default: 'lunora-player'
    Description: 'Name of the project for resource naming'
  
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  MediaLiveChannelId:
    Type: String
    Default: '3714710'
    Description: 'Existing MediaLive Channel ID that will send to MediaConnect'
  
  FlowDescription:
    Type: String
    Default: 'RTMP Router for multi-destination streaming'
    Description: 'Description for the MediaConnect flow'

Resources:
  # MediaConnect Flow for RTMP Routing
  RTMPRouterFlow:
    Type: AWS::MediaConnect::Flow
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-rtmp-router'
      AvailabilityZone: !Sub '${AWS::Region}a'
      Source:
        Name: !Sub '${ProjectName}-medialive-source'
        Description: 'Source from MediaLive channel'
        Protocol: 'RTP-FEC'
        IngestPort: 5000
        WhitelistCidr: '10.0.0.0/8'  # Allow MediaLive internal traffic
        MaxBitrate: 50000000  # 50 Mbps max
        MaxLatency: 2000      # 2 second max latency
      
  # IAM Role for MediaConnect
  MediaConnectRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-mediaconnect-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: mediaconnect.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/MediaConnectServiceRolePolicy
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function for MediaConnect Management
  MediaConnectManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-mediaconnect-manager'
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt MediaConnectManagerRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          FLOW_ARN: !GetAtt RTMPRouterFlow.FlowArn
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
          AWS_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const mediaconnect = new AWS.MediaConnect();
          
          exports.handler = async (event) => {
              console.log('MediaConnect Manager Event:', JSON.stringify(event, null, 2));
              
              try {
                  const { action, destination } = event;
                  
                  switch (action) {
                      case 'addOutput':
                          return await addOutput(destination);
                      case 'removeOutput':
                          return await removeOutput(destination.outputArn);
                      case 'updateOutput':
                          return await updateOutput(destination);
                      case 'listOutputs':
                          return await listOutputs();
                      default:
                          throw new Error(`Unknown action: ${action}`);
                  }
              } catch (error) {
                  console.error('MediaConnect Manager Error:', error);
                  throw error;
              }
          };
          
          async function addOutput(destination) {
              const params = {
                  FlowArn: process.env.FLOW_ARN,
                  Outputs: [{
                      Name: destination.name,
                      Description: destination.description || `RTMP output to ${destination.platform}`,
                      Protocol: 'RTMP',
                      Destination: destination.rtmpUrl,
                      Port: 1935,
                      StreamId: destination.streamKey,
                      MaxLatency: 2000
                  }]
              };
              
              const result = await mediaconnect.addFlowOutputs(params).promise();
              return {
                  statusCode: 200,
                  body: {
                      status: 'success',
                      outputArn: result.Outputs[0].OutputArn,
                      message: `Added output: ${destination.name}`
                  }
              };
          }
          
          async function removeOutput(outputArn) {
              const params = {
                  FlowArn: process.env.FLOW_ARN,
                  OutputArns: [outputArn]
              };
              
              await mediaconnect.removeFlowOutput(params).promise();
              return {
                  statusCode: 200,
                  body: {
                      status: 'success',
                      message: 'Output removed successfully'
                  }
              };
          }
          
          async function updateOutput(destination) {
              const params = {
                  FlowArn: process.env.FLOW_ARN,
                  OutputArn: destination.outputArn,
                  Description: destination.description,
                  Destination: destination.rtmpUrl,
                  StreamId: destination.streamKey
              };
              
              await mediaconnect.updateFlowOutput(params).promise();
              return {
                  statusCode: 200,
                  body: {
                      status: 'success',
                      message: 'Output updated successfully'
                  }
              };
          }
          
          async function listOutputs() {
              const params = {
                  FlowArn: process.env.FLOW_ARN
              };
              
              const result = await mediaconnect.describeFlow(params).promise();
              return {
                  statusCode: 200,
                  body: {
                      status: 'success',
                      outputs: result.Flow.Outputs || []
                  }
              };
          }
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for MediaConnect Manager Lambda
  MediaConnectManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-mediaconnect-manager-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MediaConnectManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mediaconnect:DescribeFlow
                  - mediaconnect:AddFlowOutputs
                  - mediaconnect:RemoveFlowOutput
                  - mediaconnect:UpdateFlowOutput
                  - mediaconnect:ListFlows
                Resource: !GetAtt RTMPRouterFlow.FlowArn
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

Outputs:
  MediaConnectFlowArn:
    Description: 'MediaConnect Flow ARN for RTMP routing'
    Value: !GetAtt RTMPRouterFlow.FlowArn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-mediaconnect-flow-arn'
  
  MediaConnectFlowName:
    Description: 'MediaConnect Flow Name'
    Value: !Ref RTMPRouterFlow
    Export:
      Name: !Sub '${ProjectName}-${Environment}-mediaconnect-flow-name'
  
  MediaConnectSourceIngestUrl:
    Description: 'MediaConnect Source Ingest URL for MediaLive'
    Value: !Sub 
      - 'rtp://${SourceIngestIp}:5000'
      - SourceIngestIp: !GetAtt RTMPRouterFlow.Source.IngestIp
    Export:
      Name: !Sub '${ProjectName}-${Environment}-mediaconnect-ingest-url'
  
  MediaConnectManagerFunctionArn:
    Description: 'MediaConnect Manager Lambda Function ARN'
    Value: !GetAtt MediaConnectManagerFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-mediaconnect-manager-arn'
  
  MediaConnectManagerFunctionName:
    Description: 'MediaConnect Manager Lambda Function Name'
    Value: !Ref MediaConnectManagerFunction
    Export:
      Name: !Sub '${ProjectName}-${Environment}-mediaconnect-manager-name'
